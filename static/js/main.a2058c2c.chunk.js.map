{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","state","console","log","status","CMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","children","googleMapURL","this","loadingElement","style","height","containerElement","mapElement","center","position","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAyDeA,E,YAtCb,WAAYC,GAAW,IAAD,8BACpB,4CAAMA,KAFRC,WACsB,EAEpBC,QAAQC,IAAI,EAAKH,OACjB,EAAKC,MAAQ,CACXG,OAAQ,WAJU,E,sEASlB,IAAMC,EAAOC,uBAAaC,wBAAc,SAACP,GAAD,OACtC,kBAAC,YAAD,CACEQ,YAAa,EACbC,cAAe,CAAEC,KAAM,OAAQC,IAAK,UAEjCX,EAAMY,aAGb,OACE,kBAAC,WAAD,KACE,kBAACP,EAAD,CACEQ,aAAcC,KAAKd,MAAMa,aACzBE,eAAgB,yBAAKC,MAAO,CAAEC,OAAO,UACrCC,iBAAkB,yBAAKF,MAAO,CAAEC,OAAO,WACvCE,WAAY,yBAAKH,MAAO,CAAEC,OAAO,UACjCG,OAAS,CAAEV,IAAK,MAAOC,IAAK,QAE1B,kBAAC,SAAD,CACEU,SAAU,CAAEX,KAAM,OAAQC,IAAK,WAEjC,kBAAC,SAAD,CACEU,SAAU,CAAEX,KAAM,OAAQC,IAAK,iB,GAhC7BW,IAAMC,WCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,CACEjB,aAAc,uGACdE,eAAgB,yBAAKC,MAAO,CAAEC,OAAO,YAErCc,SAASC,eAAe,SD8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a2058c2c.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\nimport { GoogleMap, Marker, withScriptjs, withGoogleMap } from \"react-google-maps\"\n// import Dispatch from \"redux\";\n\ninterface MapProps {\n  googleMapUrl: string;\n  children: any;\n  center: {\n    lat: number,\n    lng: number,\n  }\n}\ninterface MapState{\n  status: \"pending\"|\"success\"|\"failed\";\n}\nclass App extends React.Component<any,MapState>{\n  state: MapState;\n  constructor(props:any){\n    super(props);\n    console.log(this.props);\n    this.state = {\n      status: \"pending\",\n    }\n  }\n\n    render() {\n      const CMap = withScriptjs(withGoogleMap((props:any) =>\n        <GoogleMap\n          defaultZoom={8}\n          defaultCenter={{ lat: -34.397, lng: 150.644 }}\n          >\n            {props.children}\n          </GoogleMap>\n        ));\n      return (\n        <Fragment>\n          <CMap\n            googleMapURL={this.props.googleMapURL}\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={<div style={{ height: `700px` }} />}\n            mapElement={<div style={{ height: `100%` }} />}\n            center= {{ lat: 25.03, lng: 121.6 }}\n            >\n              <Marker\n                position={{ lat: -34.397, lng: 150.644 }}\n              />\n              <Marker\n                position={{ lat: -20.397, lng: 150.644 }}\n              />\n            </CMap>\n          </Fragment>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App\n    googleMapURL={\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC2UC4lbdcRpYIVBmrTMfD2olyZoFA-pwU&callback=initMap\"}\n    loadingElement={<div style={{ height: `100%` }} />}\n  />\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}